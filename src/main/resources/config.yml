#world-settings:
#  worldname:
#    # Delete world and recreate same name world with multiverse core.
#    auto-regeneration:
#      # Requires cron fomula. See: https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html
#      schedule: "0 0 20 1 * ?" # at 20:00 every first day of month. 
#      # When this true, recreated world's spawn point will be set to this value.
#      # If set to KEEP, keep previous spawn location.
#      # If unset (or invalid value), it will be new spawn location.
#      # Cannot use SPAWN_POINT.
#      # last 2 numbers are pitch and yaw. If there are only 3 numbers, pitch and yaw are treated as 0.
#      new-spawn-point: 0,0,0,0,0
#      # Change uid of the world on auto regeneration.
#      new-uid: true
#      # Change seed of the world on auto regeneration.
#      new-seed: true
#      # Archive replaced world in zip.
#      archive-old-world: true
#    
#    # After world creation, place base building on specified location.
#    # Even if the world creation is not by this plugin, this task will be executed.
#    # Base buildings should be defined in worldedit schem.
#    base-building:
#      # Should be defined in worldedit.
#      schem: resource_base
#      # x,y,z or SPAWN_POINT
#      location: SPAWN_POINT
#      # Ignores air blocks on pasting schem. 
#      ignore-air: true
#    
#    # Generate everything in specified range when the base building is placed with chunky plugin.
#    fill-on-world-creation:
#      # From https://github.com/pop4959/Chunky/wiki/Shapes
#      shape: square
#      # The same syntax as base-building.world.location
#      center: SPAWN_POINT
#      # (-3000 ~ 3000)
#      radius-x: 3000
#      # (-3000 ~ 3000)
#      radius-z: 3000
#    
#    # Set vanilla worldboarder after fill.
#    set-world-boader-after-fill:
#      # x,z or SPAWN_POINT
#      center: 0,0
#      # 6000 means -3000 ~ 3000 for this section (like vanilla worldboarder command).
#      radius: 6000
#    
#    # After chunky auto regeneration, execute dynmap full render command after auto generation.
#    fullrender-after-fill: true
world-settings:
  resource:
    auto-regeneration:
      schedule: "0 0 20 1 * ?"
      new-spawn-point: null
      new-uid: true
      new-seed: true
      archive-old-world: true
    base-building:
      schem: resource_base
      ignore-air: true
      location: SPAWN_POINT
    fill-on-world-creation:
      before-commands: []
      after-commands:
        - "dynmap fullrender resource"
      shape: square
      center: SPAWN_POINT
      radius-x: 3000
      radius-z: 3000
    set-world-boader-after-fill:
      center: SPAWN_POINT
      radius: 6000
    fullrender-after-fill: true

  resource_nether:
    auto-regeneration:
      schedule: "1 0 20 1 * ?"
      new-spawn-point: null
      new-uid: true
      new-seed: true
      archive-old-world: true
    fill-on-world-creation:
      before-commands: []
      after-commands:
        - "dynmap fullrender resource_nether"
      shape: square
      center: SPAWN_POINT
      radius-x: 3000
      radius-z: 3000
    set-world-boader-after-fill:
      center: SPAWN_POINT
      radius: 6000
    fullrender-after-fill: true

  resource_the_end:
    auto-regeneration:
      schedule: "2 0 20 1 * ?"
      new-spawn-point: null
      new-uid: true
      new-seed: true
      archive-old-world: true
    fill-on-world-creation:
      before-commands: []
      after-commands:
        - "dynmap fullrender resource_the_end"
      shape: square
      center: SPAWN_POINT
      radius-x: 3000
      radius-z: 3000
    set-world-boader-after-fill:
      center: SPAWN_POINT
      radius: 6000
    fullrender-after-fill: true
